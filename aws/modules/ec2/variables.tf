variable "key_pair_name" {
  description = "Name of the key pair used to access EC2 instance"
  type        = string
  default     = null
}

# If this variable is defined, this module will not create key pair but will be
# using the provided public key.
variable "public_key_path" {
  description = "Absolute to the public key from the key pair generated outside Terraform"
  type        = string
  default     = null
}

# This variable is ignored if public_key_path is defined (non-null).
variable "private_key_path" {
  description = "Path where to save the private key from the key pair generated by Terraform"
  type        = string
  default     = null
}

variable "environment" {
  description = "Environment e.g. dev, stage, beta, prod"
  type        = string
}

variable "vpc_id" {
  description = "The ID of the VPC in which EC2 instance will be provisioned"
  type        = string
}

variable "ec2" {
  description = "Specification of the EC2 instance"
  type = object({
    # e.g. "t4g.nano", "t2.micro"
    instance_type = string
    subnet_id     = string
    tags = object({
      Name        = string
      Environment = string
      Tier        = optional(string)
      Owner       = optional(string)
    })
  })
}

variable "replicas" {
  description = "Number of EC2 instances to be created"
  type        = number
  default     = 1
}

variable "ami" {
  description = "Specification of the AMI to be used when creating EC2"
  type = object({
    # ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
		# "al2023-ami-2023.*-x86_64"
    name_pattern        = list(string)
		architecture				= string # "x86_64"
    root_device_types   = optional(list(string), ["ebs"])
    virtualization_type = optional(list(string), ["hvm"])
    owners              = optional(list(string), ["aws"])
  })
}

variable "security_group_ingress_rules" {
	description = "Ingress rules of the security group associated with EC2 instance"

	# We're using map here - it's ok to pass to client the responsibility of
	# creating data structure that for_each can iterate over.
	type = map(object({
		cidr_ipv4   = string #"10.0.0.0/8"
		from_port   = number # 80
		ip_protocol = string # "tcp"
		to_port     = number # 80
	}))
}

variable "security_group_egress_rules" {
	description = "Egress rules of the security group associated with EC2 instance"
	type = map(object({
		cidr_ipv4   = string #"10.0.0.0/8"
		from_port   = number # 80
		ip_protocol = string # "tcp"
		to_port     = number # 80
	}))
}